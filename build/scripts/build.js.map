{"version":3,"sources":["script.js"],"names":["TempTracker","temps","max","min","avg","count","sum","this","insert","temperature","push","setMax","setMin","setAvg","updateView","source","document","getElementById","innerHTML","html","Handlebars","compile","template","tempratures","join","toFixed","temp","Math","apply","getMax","getMin","getAvg","addTemps","i","tracker","parseInt","addCustomTemperatures","input","values","value","split","map","item","trim","filter","val"],"mappings":"aAAA,SAASA,cACL,IAAIC,EAAQ,GACRC,EAAM,KACNC,EAAM,KACNC,EAAM,EACNC,EAAQ,EACRC,EAAM,EAEVC,KAAKC,OAAS,SAASC,GACrBR,EAAMS,KAAKD,GAEXF,KAAKI,OAAOF,GACZF,KAAKK,OAAOH,GACZF,KAAKM,OAAOJ,GAEZF,KAAKO,cAGPP,KAAKO,WAAa,WAChB,IAAIC,EAASC,SAASC,eAAe,wBAAwBC,UAGzDC,EAFWC,WAAWC,QAAQN,EAEvBO,CADG,CAAEC,YAAatB,EAAMuB,KAAK,MAAOrB,IAAKA,EAAKD,IAAKA,EAAKE,IAAKA,EAAIqB,QAAQ,KAGpFT,SAASC,eAAe,qBAAqBC,UAAYC,GAG3DZ,KAAKI,OAAS,SAASe,GAKnBxB,EAAMyB,KAAKzB,IAAL0B,MAAAD,KAAY1B,IAGtBM,KAAKsB,OAAS,WACZ,OAAO3B,GAGTK,KAAKK,OAAS,SAASc,GAMrBvB,EAAMwB,KAAKxB,IAALyB,MAAAD,KAAY1B,IAGpBM,KAAKuB,OAAS,WACZ,OAAO3B,GAGTI,KAAKM,OAAS,SAASa,GAInBtB,GAFAE,GAAYoB,IADZrB,GAAgB,IAMpBE,KAAKwB,OAAS,WACZ,OAAO3B,GAIb,SAAS4B,SAAS/B,GACd,IAAK,IAAIgC,KAAKhC,EACViC,QAAQ1B,OAAO2B,SAASlC,EAAMgC,KAItC,IAAIC,QAAU,IAAIlC,YAKlB,SAASoC,wBACP,IAAIC,EAAQrB,SAASC,eAAe,qBAClCqB,EAASD,EAAME,MAGF,KAAXD,GAKFN,SAJeM,EAAOE,MAAM,KACrBC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,SACjBC,OAAO,SAAAC,GAAG,MAAY,KAARA,KAMvBR,EAAME,MAAQ,GAjBhBP,SAAS,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG","file":"build.js","sourcesContent":["function TempTracker() {\r\n    let temps = [],\r\n        max = null,\r\n        min = null,\r\n        avg = 0,\r\n        count = 0,\r\n        sum = 0;\r\n  \r\n    this.insert = function(temperature) {\r\n      temps.push(temperature);\r\n\r\n      this.setMax(temperature);\r\n      this.setMin(temperature);\r\n      this.setAvg(temperature);\r\n\r\n      this.updateView();\r\n    };\r\n\r\n    this.updateView = function() {\r\n      var source = document.getElementById(\"temperature-template\").innerHTML;\r\n      var template = Handlebars.compile(source);\r\n      var context = { tempratures: temps.join(', '), min: min, max: max, avg: avg.toFixed(2) }\r\n      var html = template(context);\r\n\r\n      document.getElementById('results-container').innerHTML = html;\r\n    };\r\n\r\n    this.setMax = function(temp) {\r\n        // if not saving each temp value then use this\r\n        // if (max === null || temp > max) {\r\n        //   max = temp;\r\n        // }\r\n        max = Math.max(...temps);\r\n    };\r\n    \r\n    this.getMax = function() {\r\n      return max;\r\n    };\r\n\r\n    this.setMin = function(temp) {\r\n      // if not saving each temp value then use this\r\n      // if (min === null || temp < min) {\r\n      //   min = temp;\r\n      // }\r\n\r\n      min = Math.min(...temps);\r\n    }\r\n    \r\n    this.getMin = function() {\r\n      return min;\r\n    };\r\n\r\n    this.setAvg = function(temp) {\r\n        count = count + 1;\r\n        sum = sum + temp\r\n\r\n        avg = sum / count;\r\n    }\r\n    \r\n    this.getAvg = function() {    \r\n      return avg;\r\n    };\r\n}\r\n\r\nfunction addTemps(temps) {\r\n    for (let i in temps) {\r\n        tracker.insert(parseInt(temps[i]));\r\n    }\r\n}\r\n\r\nvar tracker = new TempTracker();\r\n\r\naddTemps([6, 7, 8, 9, 10, 15, 8, 6]);\r\n\r\n// add custom temerature values\r\nfunction addCustomTemperatures() {\r\n  let input = document.getElementById('temperature-input'),\r\n    values = input.value,\r\n    temperatures = [];  \r\n\r\n  if (values !== '') {\r\n    temperatures = values.split(',')\r\n          .map(item => item.trim())\r\n          .filter(val => val !== '');\r\n\r\n    addTemps(temperatures);\r\n  }\r\n\r\n  // clear input value\r\n  input.value = '';\r\n}"]}